function [deltaKp, deltaKi] = fuzzyLogic(error, changInError)
fis = mamfis;
% Add input
fis = addInput(fis,[-5 5],'Name','e');
fis = addInput(fis,[-5 5],'Name','ce');
fis = addMF(fis,'e','trimf',[-7.5 -5 -2.5],'Name','NB');
fis = addMF(fis,'e','trimf', [-5 -2.5 0],'Name','NS');
fis = addMF(fis,'e','trimf', [-2.5 0 2.5],'Name','Z');
fis = addMF(fis,'e','trimf', [0 2.5 5],'Name','PS');
fis = addMF(fis,'e','trimf', [2.5 5 7.5],'Name','PB');

fis = addMF(fis,'ce','trimf',[-7.5 -5 -2.5],'Name','NB');
fis = addMF(fis,'ce','trimf', [-5 -2.5 0],'Name','NS');
fis = addMF(fis,'ce','trimf', [-2.5 0 2.5],'Name','Z');
fis = addMF(fis,'ce','trimf', [0 2.5 5],'Name','PS');
fis = addMF(fis,'ce','trimf', [2.5 5 7.5],'Name','PB');
% Add output
fis = addOutput(fis,[0 6],'Name','Kp');
fis = addOutput(fis,[0 1],'Name','Ki');
fis = addMF(fis,'Kp','trimf', [-2.001 0 2],'Name','S');
fis = addMF(fis,'Kp','trimf',[0 2 4],'Name','M');
fis = addMF(fis,'Kp','trimf',[1.98 3.98 5.98],'Name','B');
fis = addMF(fis,'Kp','trimf', [3.985 5.984 7.983],'Name','VB');

fis = addMF(fis,'Ki','trimf',  [-0.3335 0 0.3333],'Name','S');
fis = addMF(fis,'Ki','trimf', [0 0.3333 0.6667],'Name','M');
fis = addMF(fis,'Ki','trimf', [0.3333 0.6667 1],'Name','B');
fis = addMF(fis,'Ki','trimf',  [0.6667 1 1.333],'Name','VB');
rules = [...
    "e== NB & ce == NB => Kp = VB , Ki =S"; ... 
    "e== NB & ce == NS => Kp = VB, Ki = M"; ...
    "e== NB & ce == Z => Kp = S , Ki = M"; ...
    "e== NB & ce == PS => Kp = S, Ki = M"; ...
    "e== NB & ce == PB => Kp = M, Ki = S"; ...
    
    "e== NS & ce == NB => Kp = VB , Ki = B"; ... 
    "e== NS & ce == NS => Kp = B, Ki = B"; ...
    "e== NS & ce == Z => Kp = S, Ki = B"; ...
    "e== NS & ce == PS => Kp = S, Ki = B"; ...
    "e== NS & ce == PB => Kp = B, Ki = B"; ...
    
    "e== Z & ce == NB => Kp = B , Ki = B"; ... 
    "e== Z & ce == NS => Kp = M, Ki = B"; ...
    "e== Z & ce == Z => Kp = S , Ki = VB"; ...
    "e== Z & ce == PS => Kp = S, Ki = VB"; ...
    "e== Z & ce == PB => Kp = VB, Ki = VB"; ...
    
    "e== PS & ce == NB => Kp = M , Ki = B"; ... 
    "e== PS & ce == NS => Kp = S, Ki = B"; ...
    "e== PS & ce == Z => Kp = S, Ki = B"; ...
    "e== PS & ce == PS => Kp = M, Ki = B"; ...
    "e== PS & ce == PB => Kp = VB, Ki = S"; ...
    
    "e== PB & ce == NB => Kp = S , Ki = S"; ... 
    "e== PB & ce == NS => Kp = S, Ki = S"; ...
    "e== PB & ce == Z => Kp = S, Ki = M"; ...
    "e== PB & ce == PS => Kp = B, Ki = M"; ...
    "e== PB & ce == PB => Kp = VB, Ki = S" ...
    ];
fis = addRule(fis,rules);
delta = evalfis(fis, [error, changInError]);
deltaKp = delta(1);
deltaKi = delta(2);
end